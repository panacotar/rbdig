require 'test_helper'

class ResponseTest < Minitest::Test
  def test_header_parse
    res = RbDig::Response.new(TestConstants::GTLD_DNS_REPLY)
    query_id = TestConstants::GTLD_DNS_REPLY[0..1].unpack1('n')
    assert_equal query_id, res.header[:query_id]
    assert_equal 1, res.header[:qd_count]
  end

  def test_body_parse
    res = RbDig::Response.new(TestConstants::GTLD_DNS_REPLY)
    assert_equal 'example.com', res.body[:question]
    assert_equal 1, res.body[:q_type]
  end

  def test_answers
    res = RbDig::Response.new(TestConstants::AUTH_DNS_REPLY)
    assert_equal 2, res.answers.size
  end

  def test_infinite_loop_protection
    # p res
    assert_raises(RbDig::DNSMessageError) do
      RbDig::Response.new(TestConstants::INFINITE_LOOKUP_DNS_REPLY)
    end
  end
end

module TestConstants
  AUTH_DNS_REPLY = "\x6e\x4a\x85\x00\x00\x01\x00\x02\x00\x00\x00\x01\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x01\x00\x01\xc0\x0c\x00\x01\x00\x01\x00\x00\x01\x2c\x00\x04\x17\xc0\xe4\x50\xc0\x0c\x00\x01\x00\x01\x00\x00\x01\x2c\x00\x04\x17\xc0\xe4\x54\xc0\x0c\x00\x01\x00\x01\x00\x00\x01\x2c\x00\x04\x17\xd7\x00\x88".freeze

  GTLD_DNS_REPLY = "\xae\xe2\x81\x00\x00\x01\x00\x00\x00\x02\x00\x01\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x01\x00\x01\xc0\x0c\x00\x02\x00\x01\x00\x02\xa3\x00\x00\x14\x01\x61\x0c\x69\x61\x6e\x61\x2d\x73\x65\x72\x76\x65\x72\x73\x03\x6e\x65\x74\x00\xc0\x0c\x00\x02\x00\x01\x00\x02\xa3\x00\x00\x04\x01\x62\xc0\x2b\x00\x00\x29\x10\x00\x00\x00\x00\x00\x00\x00".freeze

  INFINITE_LOOKUP_DNS_REPLY = "\x00\x01\x80\x00\x00\x01\x00\x00\x00\x0d\x00\x0e\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x01\x00\x01\xc0\x1d\x00\x02\x00\x01\x00\x02\xa3\x00\x00\x14\x01\x61\x0c\x67\x74\x6c\x64\x2d\x73\x65\x72\x76\x65\x72\x73\x03\x6e\x65\x74\x00".freeze
end
